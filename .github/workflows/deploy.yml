# name: Deploy to GitHub Pages

# on:
#   push:
#     branches: [main, master]
#   workflow_dispatch:

# permissions:
#   contents: read
#   pages: write
#   id-token: write

# concurrency:
#   group: pages
#   cancel-in-progress: false

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       # 1) ソース取得
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       # 2) Node.js セットアップ
#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: 20
#           cache: npm

#       # 3) GitHub Pages 設定
#       - name: Configure GitHub Pages
#         uses: actions/configure-pages@v4

#       # 4) キャッシュ復元（.output は除外）
#       - name: Restore npm cache
#         uses: actions/cache@v4
#         with:
#           path: node_modules
#           key: nuxt-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
#           restore-keys: nuxt-${{ runner.os }}-

#       # 5) 依存関係インストール
#       - name: Install dependencies
#         run: npm ci

#       # 6) 旧ビルドの残骸を削除
#       - name: Clean previous build
#         run: rm -rf .output

#       # 7) 静的サイト生成
#       - name: Generate static site with Nuxt
#         run: |
#           echo "==> nuxt generate start"
#           npx nuxi generate          # Nuxt3／Nuxt2 は npm run generate
#         env:
#           NODE_ENV: production
#           NODE_OPTIONS: --max-old-space-size=4096

#       # 8) ビルド内容の確認（任意）
#       - name: Inspect build output
#         run: |
#           du -sh .output || true
#           ls -la .output | head -n 20
#           echo "------ .output/public preview ------"
#           ls -la .output/public | head -n 20

#       # 9) アーティファクト整形
#       - name: Prepare artifact for Pages
#         run: |
#           mkdir upload
#           rsync -a --copy-links --delete \
#                 --exclude='*/node_modules/**' \
#                 .output/public/ upload/
#           touch upload/.nojekyll     # Jekyll 無効化

#       # 10) アーティファクトアップロード
#       - name: Upload Pages artifact
#         uses: actions/upload-pages-artifact@v3
#         with:
#           path: ./upload

#   deploy:
#     needs: build
#     runs-on: ubuntu-latest
#     environment:
#       name: github-pages
#       url: ${{ steps.deployment.outputs.page_url }}

#     steps:
#       - name: Deploy to GitHub Pages
#         id: deployment
#         uses: actions/deploy-pages@v4
# .github/workflows/deploy.yml
name: Deploy to GitHub Pages

on:
  push:
    branches: [main, master]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1) ソース取得
    - uses: actions/checkout@v4

    # 2) Node.js & npm キャッシュ
    - uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: npm

    # 3) GitHub Pages 用トークンなどを初期化
    - uses: actions/configure-pages@v4

    # 4) 依存関係インストール
    - run: npm ci

    # 5) 旧生成物を完全削除
    - run: rm -rf .output .nuxt .cache

    # 6) 静的サイト生成
    - name: Generate static site
      run: npx nuxi generate
      env:
        NODE_ENV: production
        NODE_OPTIONS: --max-old-space-size=4096

    # 7) deploy ディレクトリ作成　
    #    -L (--copy-links) で symlink を実ファイルに置き換え
    #    node_modules を除外
    - name: Prepare artifact (flatten links & strip node_modules)
      run: |
        rm -rf deploy && mkdir deploy
        rsync -aL --delete \
          --exclude='**/node_modules/**' \
          .output/public/ deploy/
        # 念のため残った node_modules を掃除
        find deploy -type d -name node_modules -prune -exec rm -rf {} +
        # symlink が残っていないか最終チェック（任意）
        if find deploy -type l | grep -q .; then
          echo "ERROR: symlink remains in deploy" >&2
          exit 1
        fi
        touch deploy/.nojekyll

    # 8) サイズ確認（オプション）
    - run: du -sh deploy || true

    # 9) アーティファクトアップロード
    - uses: actions/upload-pages-artifact@v3
      with:
        path: ./deploy

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}

    steps:
    - name: Deploy to GitHub Pages
      id: deploy
      uses: actions/deploy-pages@v4
